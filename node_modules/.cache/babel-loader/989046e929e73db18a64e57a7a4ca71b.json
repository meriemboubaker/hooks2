{"ast":null,"code":"'use strict';\n\nvar GetIntrinsic = require('get-intrinsic'); // var isNegativeZero = require('is-negative-zero');\n\n\nvar $pow = GetIntrinsic('%Math.pow%');\nvar $TypeError = GetIntrinsic('%TypeError%');\n/*\nvar abs = require('../../helpers/abs');\nvar isFinite = require('../../helpers/isFinite');\nvar isNaN = require('../../helpers/isNaN');\n\nvar IsInteger = require('../IsInteger');\n*/\n\nvar Type = require('../Type'); // https://262.ecma-international.org/11.0/#sec-numeric-types-number-exponentiate\n\n/* eslint max-lines-per-function: 0, max-statements: 0 */\n\n\nmodule.exports = function NumberExponentiate(base, exponent) {\n  if (Type(base) !== 'Number' || Type(exponent) !== 'Number') {\n    throw new $TypeError('Assertion failed: `base` and `exponent` arguments must be Numbers');\n  }\n\n  return $pow(base, exponent);\n  /*\n  if (isNaN(exponent)) {\n  \treturn NaN;\n  }\n  if (exponent === 0) {\n  \treturn 1;\n  }\n  if (isNaN(base)) {\n  \treturn NaN;\n  }\n  var aB = abs(base);\n  if (aB > 1 && exponent === Infinity) {\n  \treturn Infinity;\n  }\n  if (aB > 1 && exponent === -Infinity) {\n  \treturn 0;\n  }\n  if (aB === 1 && (exponent === Infinity || exponent === -Infinity)) {\n  \treturn NaN;\n  }\n  if (aB < 1 && exponent === Infinity) {\n  \treturn +0;\n  }\n  if (aB < 1 && exponent === -Infinity) {\n  \treturn Infinity;\n  }\n  if (base === Infinity) {\n  \treturn exponent > 0 ? Infinity : 0;\n  }\n  if (base === -Infinity) {\n  \tvar isOdd = true;\n  \tif (exponent > 0) {\n  \t\treturn isOdd ? -Infinity : Infinity;\n  \t}\n  \treturn isOdd ? -0 : 0;\n  }\n  if (exponent > 0) {\n  \treturn isNegativeZero(base) ? Infinity : 0;\n  }\n  if (isNegativeZero(base)) {\n  \tif (exponent > 0) {\n  \t\treturn isOdd ? -0 : 0;\n  \t}\n  \treturn isOdd ? -Infinity : Infinity;\n  }\n  if (base < 0 && isFinite(base) && isFinite(exponent) && !IsInteger(exponent)) {\n  \treturn NaN;\n     }\n     */\n};","map":{"version":3,"sources":["C:/Users/DELL/Downloads/hook2-main/node_modules/es-abstract/2020/Number/exponentiate.js"],"names":["GetIntrinsic","require","$pow","$TypeError","Type","module","exports","NumberExponentiate","base","exponent"],"mappings":"AAAA;;AAEA,IAAIA,YAAY,GAAGC,OAAO,CAAC,eAAD,CAA1B,C,CACA;;;AAEA,IAAIC,IAAI,GAAGF,YAAY,CAAC,YAAD,CAAvB;AAEA,IAAIG,UAAU,GAAGH,YAAY,CAAC,aAAD,CAA7B;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,IAAII,IAAI,GAAGH,OAAO,CAAC,SAAD,CAAlB,C,CAEA;;AAEA;;;AAEAI,MAAM,CAACC,OAAP,GAAiB,SAASC,kBAAT,CAA4BC,IAA5B,EAAkCC,QAAlC,EAA4C;AAC5D,MAAIL,IAAI,CAACI,IAAD,CAAJ,KAAe,QAAf,IAA2BJ,IAAI,CAACK,QAAD,CAAJ,KAAmB,QAAlD,EAA4D;AAC3D,UAAM,IAAIN,UAAJ,CAAe,mEAAf,CAAN;AACA;;AACD,SAAOD,IAAI,CAACM,IAAD,EAAOC,QAAP,CAAX;AACA;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACC,CAtDD","sourcesContent":["'use strict';\n\nvar GetIntrinsic = require('get-intrinsic');\n// var isNegativeZero = require('is-negative-zero');\n\nvar $pow = GetIntrinsic('%Math.pow%');\n\nvar $TypeError = GetIntrinsic('%TypeError%');\n\n/*\nvar abs = require('../../helpers/abs');\nvar isFinite = require('../../helpers/isFinite');\nvar isNaN = require('../../helpers/isNaN');\n\nvar IsInteger = require('../IsInteger');\n*/\nvar Type = require('../Type');\n\n// https://262.ecma-international.org/11.0/#sec-numeric-types-number-exponentiate\n\n/* eslint max-lines-per-function: 0, max-statements: 0 */\n\nmodule.exports = function NumberExponentiate(base, exponent) {\n\tif (Type(base) !== 'Number' || Type(exponent) !== 'Number') {\n\t\tthrow new $TypeError('Assertion failed: `base` and `exponent` arguments must be Numbers');\n\t}\n\treturn $pow(base, exponent);\n\t/*\n\tif (isNaN(exponent)) {\n\t\treturn NaN;\n\t}\n\tif (exponent === 0) {\n\t\treturn 1;\n\t}\n\tif (isNaN(base)) {\n\t\treturn NaN;\n\t}\n\tvar aB = abs(base);\n\tif (aB > 1 && exponent === Infinity) {\n\t\treturn Infinity;\n\t}\n\tif (aB > 1 && exponent === -Infinity) {\n\t\treturn 0;\n\t}\n\tif (aB === 1 && (exponent === Infinity || exponent === -Infinity)) {\n\t\treturn NaN;\n\t}\n\tif (aB < 1 && exponent === Infinity) {\n\t\treturn +0;\n\t}\n\tif (aB < 1 && exponent === -Infinity) {\n\t\treturn Infinity;\n\t}\n\tif (base === Infinity) {\n\t\treturn exponent > 0 ? Infinity : 0;\n\t}\n\tif (base === -Infinity) {\n\t\tvar isOdd = true;\n\t\tif (exponent > 0) {\n\t\t\treturn isOdd ? -Infinity : Infinity;\n\t\t}\n\t\treturn isOdd ? -0 : 0;\n\t}\n\tif (exponent > 0) {\n\t\treturn isNegativeZero(base) ? Infinity : 0;\n\t}\n\tif (isNegativeZero(base)) {\n\t\tif (exponent > 0) {\n\t\t\treturn isOdd ? -0 : 0;\n\t\t}\n\t\treturn isOdd ? -Infinity : Infinity;\n\t}\n\tif (base < 0 && isFinite(base) && isFinite(exponent) && !IsInteger(exponent)) {\n\t\treturn NaN;\n    }\n    */\n};\n"]},"metadata":{},"sourceType":"script"}