{"ast":null,"code":"'use strict';\n\nvar GetIntrinsic = require('get-intrinsic');\n\nvar $TypeError = GetIntrinsic('%TypeError%');\n\nvar callBound = require('call-bind/callBound');\n\nvar forEach = require('../helpers/forEach');\n\nvar isLeadingSurrogate = require('../helpers/isLeadingSurrogate');\n\nvar isTrailingSurrogate = require('../helpers/isTrailingSurrogate');\n\nvar $charCodeAt = callBound('String.prototype.charCodeAt');\nvar $strSplit = callBound('String.prototype.split');\n\nvar Type = require('./Type');\n\nvar UnicodeEscape = require('./UnicodeEscape');\n\nvar UTF16Encoding = require('./UTF16Encoding');\n\nvar has = require('has'); // https://262.ecma-international.org/10.0/#sec-quotejsonstring\n\n\nvar escapes = {\n  '\\u0008': '\\\\b',\n  '\\u0009': '\\\\t',\n  '\\u000A': '\\\\n',\n  '\\u000C': '\\\\f',\n  '\\u000D': '\\\\r',\n  '\\u0022': '\\\\\"',\n  '\\u005c': '\\\\\\\\'\n};\n\nmodule.exports = function QuoteJSONString(value) {\n  if (Type(value) !== 'String') {\n    throw new $TypeError('Assertion failed: `value` must be a String');\n  }\n\n  var product = '\"';\n\n  if (value) {\n    forEach($strSplit(value), function (C) {\n      if (has(escapes, C)) {\n        product += escapes[C];\n      } else {\n        var cCharCode = $charCodeAt(C, 0);\n\n        if (cCharCode < 0x20 || isLeadingSurrogate(C) || isTrailingSurrogate(C)) {\n          product += UnicodeEscape(C);\n        } else {\n          product += UTF16Encoding(cCharCode);\n        }\n      }\n    });\n  }\n\n  product += '\"';\n  return product;\n};","map":{"version":3,"sources":["C:/Users/DELL/Downloads/hook2-main/node_modules/es-abstract/2019/QuoteJSONString.js"],"names":["GetIntrinsic","require","$TypeError","callBound","forEach","isLeadingSurrogate","isTrailingSurrogate","$charCodeAt","$strSplit","Type","UnicodeEscape","UTF16Encoding","has","escapes","module","exports","QuoteJSONString","value","product","C","cCharCode"],"mappings":"AAAA;;AAEA,IAAIA,YAAY,GAAGC,OAAO,CAAC,eAAD,CAA1B;;AAEA,IAAIC,UAAU,GAAGF,YAAY,CAAC,aAAD,CAA7B;;AAEA,IAAIG,SAAS,GAAGF,OAAO,CAAC,qBAAD,CAAvB;;AACA,IAAIG,OAAO,GAAGH,OAAO,CAAC,oBAAD,CAArB;;AACA,IAAII,kBAAkB,GAAGJ,OAAO,CAAC,+BAAD,CAAhC;;AACA,IAAIK,mBAAmB,GAAGL,OAAO,CAAC,gCAAD,CAAjC;;AAEA,IAAIM,WAAW,GAAGJ,SAAS,CAAC,6BAAD,CAA3B;AACA,IAAIK,SAAS,GAAGL,SAAS,CAAC,wBAAD,CAAzB;;AAEA,IAAIM,IAAI,GAAGR,OAAO,CAAC,QAAD,CAAlB;;AACA,IAAIS,aAAa,GAAGT,OAAO,CAAC,iBAAD,CAA3B;;AACA,IAAIU,aAAa,GAAGV,OAAO,CAAC,iBAAD,CAA3B;;AAEA,IAAIW,GAAG,GAAGX,OAAO,CAAC,KAAD,CAAjB,C,CAEA;;;AAEA,IAAIY,OAAO,GAAG;AACb,YAAU,KADG;AAEb,YAAU,KAFG;AAGb,YAAU,KAHG;AAIb,YAAU,KAJG;AAKb,YAAU,KALG;AAMb,YAAU,KANG;AAOb,YAAU;AAPG,CAAd;;AAUAC,MAAM,CAACC,OAAP,GAAiB,SAASC,eAAT,CAAyBC,KAAzB,EAAgC;AAChD,MAAIR,IAAI,CAACQ,KAAD,CAAJ,KAAgB,QAApB,EAA8B;AAC7B,UAAM,IAAIf,UAAJ,CAAe,4CAAf,CAAN;AACA;;AACD,MAAIgB,OAAO,GAAG,GAAd;;AACA,MAAID,KAAJ,EAAW;AACVb,IAAAA,OAAO,CAACI,SAAS,CAACS,KAAD,CAAV,EAAmB,UAAUE,CAAV,EAAa;AACtC,UAAIP,GAAG,CAACC,OAAD,EAAUM,CAAV,CAAP,EAAqB;AACpBD,QAAAA,OAAO,IAAIL,OAAO,CAACM,CAAD,CAAlB;AACA,OAFD,MAEO;AACN,YAAIC,SAAS,GAAGb,WAAW,CAACY,CAAD,EAAI,CAAJ,CAA3B;;AACA,YAAIC,SAAS,GAAG,IAAZ,IAAoBf,kBAAkB,CAACc,CAAD,CAAtC,IAA6Cb,mBAAmB,CAACa,CAAD,CAApE,EAAyE;AACxED,UAAAA,OAAO,IAAIR,aAAa,CAACS,CAAD,CAAxB;AACA,SAFD,MAEO;AACND,UAAAA,OAAO,IAAIP,aAAa,CAACS,SAAD,CAAxB;AACA;AACD;AACD,KAXM,CAAP;AAYA;;AACDF,EAAAA,OAAO,IAAI,GAAX;AACA,SAAOA,OAAP;AACA,CArBD","sourcesContent":["'use strict';\n\nvar GetIntrinsic = require('get-intrinsic');\n\nvar $TypeError = GetIntrinsic('%TypeError%');\n\nvar callBound = require('call-bind/callBound');\nvar forEach = require('../helpers/forEach');\nvar isLeadingSurrogate = require('../helpers/isLeadingSurrogate');\nvar isTrailingSurrogate = require('../helpers/isTrailingSurrogate');\n\nvar $charCodeAt = callBound('String.prototype.charCodeAt');\nvar $strSplit = callBound('String.prototype.split');\n\nvar Type = require('./Type');\nvar UnicodeEscape = require('./UnicodeEscape');\nvar UTF16Encoding = require('./UTF16Encoding');\n\nvar has = require('has');\n\n// https://262.ecma-international.org/10.0/#sec-quotejsonstring\n\nvar escapes = {\n\t'\\u0008': '\\\\b',\n\t'\\u0009': '\\\\t',\n\t'\\u000A': '\\\\n',\n\t'\\u000C': '\\\\f',\n\t'\\u000D': '\\\\r',\n\t'\\u0022': '\\\\\"',\n\t'\\u005c': '\\\\\\\\'\n};\n\nmodule.exports = function QuoteJSONString(value) {\n\tif (Type(value) !== 'String') {\n\t\tthrow new $TypeError('Assertion failed: `value` must be a String');\n\t}\n\tvar product = '\"';\n\tif (value) {\n\t\tforEach($strSplit(value), function (C) {\n\t\t\tif (has(escapes, C)) {\n\t\t\t\tproduct += escapes[C];\n\t\t\t} else {\n\t\t\t\tvar cCharCode = $charCodeAt(C, 0);\n\t\t\t\tif (cCharCode < 0x20 || isLeadingSurrogate(C) || isTrailingSurrogate(C)) {\n\t\t\t\t\tproduct += UnicodeEscape(C);\n\t\t\t\t} else {\n\t\t\t\t\tproduct += UTF16Encoding(cCharCode);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t}\n\tproduct += '\"';\n\treturn product;\n};\n"]},"metadata":{},"sourceType":"script"}