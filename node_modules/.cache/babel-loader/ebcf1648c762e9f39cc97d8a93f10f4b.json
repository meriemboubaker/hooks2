{"ast":null,"code":"'use strict';\n\nvar GetIntrinsic = require('get-intrinsic');\n\nvar $RangeError = GetIntrinsic('%RangeError%');\n\nvar ToInteger = require('./ToInteger');\n\nvar ToLength = require('./ToLength');\n\nvar SameValue = require('./SameValue'); // https://262.ecma-international.org/12.0/#sec-toindex\n\n\nmodule.exports = function ToIndex(value) {\n  if (typeof value === 'undefined') {\n    return 0;\n  }\n\n  var integerIndex = ToInteger(value);\n\n  if (integerIndex < 0) {\n    throw new $RangeError('index must be >= 0');\n  }\n\n  var index = ToLength(integerIndex);\n\n  if (!SameValue(integerIndex, index)) {\n    throw new $RangeError('index must be >= 0 and < 2 ** 53 - 1');\n  }\n\n  return index;\n};","map":{"version":3,"sources":["C:/Users/DELL/Downloads/hook2-main/node_modules/es-abstract/2020/ToIndex.js"],"names":["GetIntrinsic","require","$RangeError","ToInteger","ToLength","SameValue","module","exports","ToIndex","value","integerIndex","index"],"mappings":"AAAA;;AAEA,IAAIA,YAAY,GAAGC,OAAO,CAAC,eAAD,CAA1B;;AAEA,IAAIC,WAAW,GAAGF,YAAY,CAAC,cAAD,CAA9B;;AAEA,IAAIG,SAAS,GAAGF,OAAO,CAAC,aAAD,CAAvB;;AACA,IAAIG,QAAQ,GAAGH,OAAO,CAAC,YAAD,CAAtB;;AACA,IAAII,SAAS,GAAGJ,OAAO,CAAC,aAAD,CAAvB,C,CAEA;;;AAEAK,MAAM,CAACC,OAAP,GAAiB,SAASC,OAAT,CAAiBC,KAAjB,EAAwB;AACxC,MAAI,OAAOA,KAAP,KAAiB,WAArB,EAAkC;AACjC,WAAO,CAAP;AACA;;AACD,MAAIC,YAAY,GAAGP,SAAS,CAACM,KAAD,CAA5B;;AACA,MAAIC,YAAY,GAAG,CAAnB,EAAsB;AACrB,UAAM,IAAIR,WAAJ,CAAgB,oBAAhB,CAAN;AACA;;AACD,MAAIS,KAAK,GAAGP,QAAQ,CAACM,YAAD,CAApB;;AACA,MAAI,CAACL,SAAS,CAACK,YAAD,EAAeC,KAAf,CAAd,EAAqC;AACpC,UAAM,IAAIT,WAAJ,CAAgB,sCAAhB,CAAN;AACA;;AACD,SAAOS,KAAP;AACA,CAbD","sourcesContent":["'use strict';\n\nvar GetIntrinsic = require('get-intrinsic');\n\nvar $RangeError = GetIntrinsic('%RangeError%');\n\nvar ToInteger = require('./ToInteger');\nvar ToLength = require('./ToLength');\nvar SameValue = require('./SameValue');\n\n// https://262.ecma-international.org/12.0/#sec-toindex\n\nmodule.exports = function ToIndex(value) {\n\tif (typeof value === 'undefined') {\n\t\treturn 0;\n\t}\n\tvar integerIndex = ToInteger(value);\n\tif (integerIndex < 0) {\n\t\tthrow new $RangeError('index must be >= 0');\n\t}\n\tvar index = ToLength(integerIndex);\n\tif (!SameValue(integerIndex, index)) {\n\t\tthrow new $RangeError('index must be >= 0 and < 2 ** 53 - 1');\n\t}\n\treturn index;\n};\n"]},"metadata":{},"sourceType":"script"}