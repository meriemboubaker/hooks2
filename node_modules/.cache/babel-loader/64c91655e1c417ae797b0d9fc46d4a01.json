{"ast":null,"code":"'use strict';\n\nvar GetIntrinsic = require('get-intrinsic');\n\nvar $TypeError = GetIntrinsic('%TypeError%');\n\nvar callBound = require('call-bind/callBound');\n\nvar forEach = require('../helpers/forEach');\n\nvar $charCodeAt = callBound('String.prototype.charCodeAt');\nvar $numberToString = callBound('Number.prototype.toString');\nvar $toLowerCase = callBound('String.prototype.toLowerCase');\nvar $strSlice = callBound('String.prototype.slice');\nvar $strSplit = callBound('String.prototype.split');\n\nvar Type = require('./Type'); // https://ecma-international.org/ecma-262/6.0/#sec-quotejsonstring\n\n\nvar escapes = {\n  '\\u0008': 'b',\n  '\\u000C': 'f',\n  '\\u000A': 'n',\n  '\\u000D': 'r',\n  '\\u0009': 't'\n};\n\nmodule.exports = function QuoteJSONString(value) {\n  if (Type(value) !== 'String') {\n    throw new $TypeError('Assertion failed: `value` must be a String');\n  }\n\n  var product = '\"';\n\n  if (value) {\n    forEach($strSplit(value), function (C) {\n      if (C === '\"' || C === '\\\\') {\n        product += '\\u005C' + C;\n      } else if (C === '\\u0008' || C === '\\u000C' || C === '\\u000A' || C === '\\u000D' || C === '\\u0009') {\n        var abbrev = escapes[C];\n        product += '\\u005C' + abbrev;\n      } else {\n        var cCharCode = $charCodeAt(C, 0);\n\n        if (cCharCode < 0x20) {\n          product += '\\u005Cu' + $toLowerCase($strSlice('0000' + $numberToString(cCharCode, 16), -4));\n        } else {\n          product += C;\n        }\n      }\n    });\n  }\n\n  product += '\"';\n  return product;\n};","map":{"version":3,"sources":["C:/Users/DELL/Downloads/hook2-main/node_modules/es-abstract/2015/QuoteJSONString.js"],"names":["GetIntrinsic","require","$TypeError","callBound","forEach","$charCodeAt","$numberToString","$toLowerCase","$strSlice","$strSplit","Type","escapes","module","exports","QuoteJSONString","value","product","C","abbrev","cCharCode"],"mappings":"AAAA;;AAEA,IAAIA,YAAY,GAAGC,OAAO,CAAC,eAAD,CAA1B;;AAEA,IAAIC,UAAU,GAAGF,YAAY,CAAC,aAAD,CAA7B;;AAEA,IAAIG,SAAS,GAAGF,OAAO,CAAC,qBAAD,CAAvB;;AACA,IAAIG,OAAO,GAAGH,OAAO,CAAC,oBAAD,CAArB;;AAEA,IAAII,WAAW,GAAGF,SAAS,CAAC,6BAAD,CAA3B;AACA,IAAIG,eAAe,GAAGH,SAAS,CAAC,2BAAD,CAA/B;AACA,IAAII,YAAY,GAAGJ,SAAS,CAAC,8BAAD,CAA5B;AACA,IAAIK,SAAS,GAAGL,SAAS,CAAC,wBAAD,CAAzB;AACA,IAAIM,SAAS,GAAGN,SAAS,CAAC,wBAAD,CAAzB;;AAEA,IAAIO,IAAI,GAAGT,OAAO,CAAC,QAAD,CAAlB,C,CAEA;;;AAEA,IAAIU,OAAO,GAAG;AACb,YAAU,GADG;AAEb,YAAU,GAFG;AAGb,YAAU,GAHG;AAIb,YAAU,GAJG;AAKb,YAAU;AALG,CAAd;;AAQAC,MAAM,CAACC,OAAP,GAAiB,SAASC,eAAT,CAAyBC,KAAzB,EAAgC;AAChD,MAAIL,IAAI,CAACK,KAAD,CAAJ,KAAgB,QAApB,EAA8B;AAC7B,UAAM,IAAIb,UAAJ,CAAe,4CAAf,CAAN;AACA;;AACD,MAAIc,OAAO,GAAG,GAAd;;AACA,MAAID,KAAJ,EAAW;AACVX,IAAAA,OAAO,CAACK,SAAS,CAACM,KAAD,CAAV,EAAmB,UAAUE,CAAV,EAAa;AACtC,UAAIA,CAAC,KAAK,GAAN,IAAaA,CAAC,KAAK,IAAvB,EAA6B;AAC5BD,QAAAA,OAAO,IAAI,WAAWC,CAAtB;AACA,OAFD,MAEO,IAAIA,CAAC,KAAK,QAAN,IAAkBA,CAAC,KAAK,QAAxB,IAAoCA,CAAC,KAAK,QAA1C,IAAsDA,CAAC,KAAK,QAA5D,IAAwEA,CAAC,KAAK,QAAlF,EAA4F;AAClG,YAAIC,MAAM,GAAGP,OAAO,CAACM,CAAD,CAApB;AACAD,QAAAA,OAAO,IAAI,WAAWE,MAAtB;AACA,OAHM,MAGA;AACN,YAAIC,SAAS,GAAGd,WAAW,CAACY,CAAD,EAAI,CAAJ,CAA3B;;AACA,YAAIE,SAAS,GAAG,IAAhB,EAAsB;AACrBH,UAAAA,OAAO,IAAI,YAAYT,YAAY,CAACC,SAAS,CAAC,SAASF,eAAe,CAACa,SAAD,EAAY,EAAZ,CAAzB,EAA0C,CAAC,CAA3C,CAAV,CAAnC;AACA,SAFD,MAEO;AACNH,UAAAA,OAAO,IAAIC,CAAX;AACA;AACD;AACD,KAdM,CAAP;AAeA;;AACDD,EAAAA,OAAO,IAAI,GAAX;AACA,SAAOA,OAAP;AACA,CAxBD","sourcesContent":["'use strict';\n\nvar GetIntrinsic = require('get-intrinsic');\n\nvar $TypeError = GetIntrinsic('%TypeError%');\n\nvar callBound = require('call-bind/callBound');\nvar forEach = require('../helpers/forEach');\n\nvar $charCodeAt = callBound('String.prototype.charCodeAt');\nvar $numberToString = callBound('Number.prototype.toString');\nvar $toLowerCase = callBound('String.prototype.toLowerCase');\nvar $strSlice = callBound('String.prototype.slice');\nvar $strSplit = callBound('String.prototype.split');\n\nvar Type = require('./Type');\n\n// https://ecma-international.org/ecma-262/6.0/#sec-quotejsonstring\n\nvar escapes = {\n\t'\\u0008': 'b',\n\t'\\u000C': 'f',\n\t'\\u000A': 'n',\n\t'\\u000D': 'r',\n\t'\\u0009': 't'\n};\n\nmodule.exports = function QuoteJSONString(value) {\n\tif (Type(value) !== 'String') {\n\t\tthrow new $TypeError('Assertion failed: `value` must be a String');\n\t}\n\tvar product = '\"';\n\tif (value) {\n\t\tforEach($strSplit(value), function (C) {\n\t\t\tif (C === '\"' || C === '\\\\') {\n\t\t\t\tproduct += '\\u005C' + C;\n\t\t\t} else if (C === '\\u0008' || C === '\\u000C' || C === '\\u000A' || C === '\\u000D' || C === '\\u0009') {\n\t\t\t\tvar abbrev = escapes[C];\n\t\t\t\tproduct += '\\u005C' + abbrev;\n\t\t\t} else {\n\t\t\t\tvar cCharCode = $charCodeAt(C, 0);\n\t\t\t\tif (cCharCode < 0x20) {\n\t\t\t\t\tproduct += '\\u005Cu' + $toLowerCase($strSlice('0000' + $numberToString(cCharCode, 16), -4));\n\t\t\t\t} else {\n\t\t\t\t\tproduct += C;\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t}\n\tproduct += '\"';\n\treturn product;\n};\n"]},"metadata":{},"sourceType":"script"}