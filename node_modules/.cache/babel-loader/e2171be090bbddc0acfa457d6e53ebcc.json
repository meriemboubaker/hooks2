{"ast":null,"code":"'use strict';\n\nvar ToNumber = require('./ToNumber');\n\nvar ToPrimitive = require('./ToPrimitive');\n\nvar Type = require('./Type'); // https://262.ecma-international.org/5.1/#sec-11.9.3\n\n\nmodule.exports = function AbstractEqualityComparison(x, y) {\n  var xType = Type(x);\n  var yType = Type(y);\n\n  if (xType === yType) {\n    return x === y; // ES6+ specified this shortcut anyways.\n  }\n\n  if (x == null && y == null) {\n    return true;\n  }\n\n  if (xType === 'Number' && yType === 'String') {\n    return AbstractEqualityComparison(x, ToNumber(y));\n  }\n\n  if (xType === 'String' && yType === 'Number') {\n    return AbstractEqualityComparison(ToNumber(x), y);\n  }\n\n  if (xType === 'Boolean') {\n    return AbstractEqualityComparison(ToNumber(x), y);\n  }\n\n  if (yType === 'Boolean') {\n    return AbstractEqualityComparison(x, ToNumber(y));\n  }\n\n  if ((xType === 'String' || xType === 'Number') && yType === 'Object') {\n    return AbstractEqualityComparison(x, ToPrimitive(y));\n  }\n\n  if (xType === 'Object' && (yType === 'String' || yType === 'Number')) {\n    return AbstractEqualityComparison(ToPrimitive(x), y);\n  }\n\n  return false;\n};","map":{"version":3,"sources":["C:/Users/DELL/Downloads/hook2-main/node_modules/es-abstract/5/AbstractEqualityComparison.js"],"names":["ToNumber","require","ToPrimitive","Type","module","exports","AbstractEqualityComparison","x","y","xType","yType"],"mappings":"AAAA;;AAEA,IAAIA,QAAQ,GAAGC,OAAO,CAAC,YAAD,CAAtB;;AACA,IAAIC,WAAW,GAAGD,OAAO,CAAC,eAAD,CAAzB;;AACA,IAAIE,IAAI,GAAGF,OAAO,CAAC,QAAD,CAAlB,C,CAEA;;;AAEAG,MAAM,CAACC,OAAP,GAAiB,SAASC,0BAAT,CAAoCC,CAApC,EAAuCC,CAAvC,EAA0C;AAC1D,MAAIC,KAAK,GAAGN,IAAI,CAACI,CAAD,CAAhB;AACA,MAAIG,KAAK,GAAGP,IAAI,CAACK,CAAD,CAAhB;;AACA,MAAIC,KAAK,KAAKC,KAAd,EAAqB;AACpB,WAAOH,CAAC,KAAKC,CAAb,CADoB,CACJ;AAChB;;AACD,MAAID,CAAC,IAAI,IAAL,IAAaC,CAAC,IAAI,IAAtB,EAA4B;AAC3B,WAAO,IAAP;AACA;;AACD,MAAIC,KAAK,KAAK,QAAV,IAAsBC,KAAK,KAAK,QAApC,EAA8C;AAC7C,WAAOJ,0BAA0B,CAACC,CAAD,EAAIP,QAAQ,CAACQ,CAAD,CAAZ,CAAjC;AACA;;AACD,MAAIC,KAAK,KAAK,QAAV,IAAsBC,KAAK,KAAK,QAApC,EAA8C;AAC7C,WAAOJ,0BAA0B,CAACN,QAAQ,CAACO,CAAD,CAAT,EAAcC,CAAd,CAAjC;AACA;;AACD,MAAIC,KAAK,KAAK,SAAd,EAAyB;AACxB,WAAOH,0BAA0B,CAACN,QAAQ,CAACO,CAAD,CAAT,EAAcC,CAAd,CAAjC;AACA;;AACD,MAAIE,KAAK,KAAK,SAAd,EAAyB;AACxB,WAAOJ,0BAA0B,CAACC,CAAD,EAAIP,QAAQ,CAACQ,CAAD,CAAZ,CAAjC;AACA;;AACD,MAAI,CAACC,KAAK,KAAK,QAAV,IAAsBA,KAAK,KAAK,QAAjC,KAA8CC,KAAK,KAAK,QAA5D,EAAsE;AACrE,WAAOJ,0BAA0B,CAACC,CAAD,EAAIL,WAAW,CAACM,CAAD,CAAf,CAAjC;AACA;;AACD,MAAIC,KAAK,KAAK,QAAV,KAAuBC,KAAK,KAAK,QAAV,IAAsBA,KAAK,KAAK,QAAvD,CAAJ,EAAsE;AACrE,WAAOJ,0BAA0B,CAACJ,WAAW,CAACK,CAAD,CAAZ,EAAiBC,CAAjB,CAAjC;AACA;;AACD,SAAO,KAAP;AACA,CA5BD","sourcesContent":["'use strict';\n\nvar ToNumber = require('./ToNumber');\nvar ToPrimitive = require('./ToPrimitive');\nvar Type = require('./Type');\n\n// https://262.ecma-international.org/5.1/#sec-11.9.3\n\nmodule.exports = function AbstractEqualityComparison(x, y) {\n\tvar xType = Type(x);\n\tvar yType = Type(y);\n\tif (xType === yType) {\n\t\treturn x === y; // ES6+ specified this shortcut anyways.\n\t}\n\tif (x == null && y == null) {\n\t\treturn true;\n\t}\n\tif (xType === 'Number' && yType === 'String') {\n\t\treturn AbstractEqualityComparison(x, ToNumber(y));\n\t}\n\tif (xType === 'String' && yType === 'Number') {\n\t\treturn AbstractEqualityComparison(ToNumber(x), y);\n\t}\n\tif (xType === 'Boolean') {\n\t\treturn AbstractEqualityComparison(ToNumber(x), y);\n\t}\n\tif (yType === 'Boolean') {\n\t\treturn AbstractEqualityComparison(x, ToNumber(y));\n\t}\n\tif ((xType === 'String' || xType === 'Number') && yType === 'Object') {\n\t\treturn AbstractEqualityComparison(x, ToPrimitive(y));\n\t}\n\tif (xType === 'Object' && (yType === 'String' || yType === 'Number')) {\n\t\treturn AbstractEqualityComparison(ToPrimitive(x), y);\n\t}\n\treturn false;\n};\n"]},"metadata":{},"sourceType":"script"}