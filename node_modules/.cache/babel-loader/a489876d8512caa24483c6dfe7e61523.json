{"ast":null,"code":"'use strict';\n\nvar GetIntrinsic = require('get-intrinsic');\n\nvar $BigInt = GetIntrinsic('%BigInt%', true);\nvar $RangeError = GetIntrinsic('%RangeError%');\nvar $TypeError = GetIntrinsic('%TypeError%');\n\nvar Type = require('../Type');\n\nvar zero = $BigInt && $BigInt(0); // https://262.ecma-international.org/11.0/#sec-numeric-types-bigint-remainder\n\nmodule.exports = function BigIntRemainder(n, d) {\n  if (Type(n) !== 'BigInt' || Type(d) !== 'BigInt') {\n    throw new $TypeError('Assertion failed: `n` and `d` arguments must be BigInts');\n  }\n\n  if (d === zero) {\n    throw new $RangeError('Division by zero');\n  }\n\n  if (n === zero) {\n    return zero;\n  } // shortcut for the actual spec mechanics\n\n\n  return n % d;\n};","map":{"version":3,"sources":["C:/Users/DELL/Downloads/hook2-main/node_modules/es-abstract/2020/BigInt/remainder.js"],"names":["GetIntrinsic","require","$BigInt","$RangeError","$TypeError","Type","zero","module","exports","BigIntRemainder","n","d"],"mappings":"AAAA;;AAEA,IAAIA,YAAY,GAAGC,OAAO,CAAC,eAAD,CAA1B;;AAEA,IAAIC,OAAO,GAAGF,YAAY,CAAC,UAAD,EAAa,IAAb,CAA1B;AACA,IAAIG,WAAW,GAAGH,YAAY,CAAC,cAAD,CAA9B;AACA,IAAII,UAAU,GAAGJ,YAAY,CAAC,aAAD,CAA7B;;AAEA,IAAIK,IAAI,GAAGJ,OAAO,CAAC,SAAD,CAAlB;;AAEA,IAAIK,IAAI,GAAGJ,OAAO,IAAIA,OAAO,CAAC,CAAD,CAA7B,C,CAEA;;AAEAK,MAAM,CAACC,OAAP,GAAiB,SAASC,eAAT,CAAyBC,CAAzB,EAA4BC,CAA5B,EAA+B;AAC/C,MAAIN,IAAI,CAACK,CAAD,CAAJ,KAAY,QAAZ,IAAwBL,IAAI,CAACM,CAAD,CAAJ,KAAY,QAAxC,EAAkD;AACjD,UAAM,IAAIP,UAAJ,CAAe,yDAAf,CAAN;AACA;;AAED,MAAIO,CAAC,KAAKL,IAAV,EAAgB;AACf,UAAM,IAAIH,WAAJ,CAAgB,kBAAhB,CAAN;AACA;;AAED,MAAIO,CAAC,KAAKJ,IAAV,EAAgB;AACf,WAAOA,IAAP;AACA,GAX8C,CAa/C;;;AACA,SAAOI,CAAC,GAAGC,CAAX;AACA,CAfD","sourcesContent":["'use strict';\n\nvar GetIntrinsic = require('get-intrinsic');\n\nvar $BigInt = GetIntrinsic('%BigInt%', true);\nvar $RangeError = GetIntrinsic('%RangeError%');\nvar $TypeError = GetIntrinsic('%TypeError%');\n\nvar Type = require('../Type');\n\nvar zero = $BigInt && $BigInt(0);\n\n// https://262.ecma-international.org/11.0/#sec-numeric-types-bigint-remainder\n\nmodule.exports = function BigIntRemainder(n, d) {\n\tif (Type(n) !== 'BigInt' || Type(d) !== 'BigInt') {\n\t\tthrow new $TypeError('Assertion failed: `n` and `d` arguments must be BigInts');\n\t}\n\n\tif (d === zero) {\n\t\tthrow new $RangeError('Division by zero');\n\t}\n\n\tif (n === zero) {\n\t\treturn zero;\n\t}\n\n\t// shortcut for the actual spec mechanics\n\treturn n % d;\n};\n"]},"metadata":{},"sourceType":"script"}