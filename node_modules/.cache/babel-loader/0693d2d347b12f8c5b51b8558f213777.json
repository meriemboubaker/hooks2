{"ast":null,"code":"'use strict';\n\nvar whichBoxedPrimitive = require('which-boxed-primitive');\n\nvar bind = require('function-bind');\n\nvar hasSymbols = require('has-symbols')();\n\nvar hasBigInts = require('has-bigints')();\n\nvar stringToString = bind.call(Function.call, String.prototype.toString);\nvar numberValueOf = bind.call(Function.call, Number.prototype.valueOf);\nvar booleanValueOf = bind.call(Function.call, Boolean.prototype.valueOf);\nvar symbolValueOf = hasSymbols && bind.call(Function.call, Symbol.prototype.valueOf);\nvar bigIntValueOf = hasBigInts && bind.call(Function.call, BigInt.prototype.valueOf);\n\nmodule.exports = function unboxPrimitive(value) {\n  var which = whichBoxedPrimitive(value);\n\n  if (typeof which !== 'string') {\n    throw new TypeError(which === null ? 'value is an unboxed primitive' : 'value is a non-boxed-primitive object');\n  }\n\n  if (which === 'String') {\n    return stringToString(value);\n  }\n\n  if (which === 'Number') {\n    return numberValueOf(value);\n  }\n\n  if (which === 'Boolean') {\n    return booleanValueOf(value);\n  }\n\n  if (which === 'Symbol') {\n    if (!hasSymbols) {\n      throw new EvalError('somehow this environment does not have Symbols, but you have a boxed Symbol value. Please report this!');\n    }\n\n    return symbolValueOf(value);\n  }\n\n  if (which === 'BigInt') {\n    return bigIntValueOf(value);\n  }\n\n  throw new RangeError('unknown boxed primitive found: ' + which);\n};","map":{"version":3,"sources":["C:/Users/DELL/Downloads/hook2-main/node_modules/unbox-primitive/index.js"],"names":["whichBoxedPrimitive","require","bind","hasSymbols","hasBigInts","stringToString","call","Function","String","prototype","toString","numberValueOf","Number","valueOf","booleanValueOf","Boolean","symbolValueOf","Symbol","bigIntValueOf","BigInt","module","exports","unboxPrimitive","value","which","TypeError","EvalError","RangeError"],"mappings":"AAAA;;AAEA,IAAIA,mBAAmB,GAAGC,OAAO,CAAC,uBAAD,CAAjC;;AACA,IAAIC,IAAI,GAAGD,OAAO,CAAC,eAAD,CAAlB;;AACA,IAAIE,UAAU,GAAGF,OAAO,CAAC,aAAD,CAAP,EAAjB;;AACA,IAAIG,UAAU,GAAGH,OAAO,CAAC,aAAD,CAAP,EAAjB;;AAEA,IAAII,cAAc,GAAGH,IAAI,CAACI,IAAL,CAAUC,QAAQ,CAACD,IAAnB,EAAyBE,MAAM,CAACC,SAAP,CAAiBC,QAA1C,CAArB;AACA,IAAIC,aAAa,GAAGT,IAAI,CAACI,IAAL,CAAUC,QAAQ,CAACD,IAAnB,EAAyBM,MAAM,CAACH,SAAP,CAAiBI,OAA1C,CAApB;AACA,IAAIC,cAAc,GAAGZ,IAAI,CAACI,IAAL,CAAUC,QAAQ,CAACD,IAAnB,EAAyBS,OAAO,CAACN,SAAR,CAAkBI,OAA3C,CAArB;AACA,IAAIG,aAAa,GAAGb,UAAU,IAAID,IAAI,CAACI,IAAL,CAAUC,QAAQ,CAACD,IAAnB,EAAyBW,MAAM,CAACR,SAAP,CAAiBI,OAA1C,CAAlC;AACA,IAAIK,aAAa,GAAGd,UAAU,IAAIF,IAAI,CAACI,IAAL,CAAUC,QAAQ,CAACD,IAAnB,EAAyBa,MAAM,CAACV,SAAP,CAAiBI,OAA1C,CAAlC;;AAEAO,MAAM,CAACC,OAAP,GAAiB,SAASC,cAAT,CAAwBC,KAAxB,EAA+B;AAC/C,MAAIC,KAAK,GAAGxB,mBAAmB,CAACuB,KAAD,CAA/B;;AACA,MAAI,OAAOC,KAAP,KAAiB,QAArB,EAA+B;AAC9B,UAAM,IAAIC,SAAJ,CAAcD,KAAK,KAAK,IAAV,GAAiB,+BAAjB,GAAmD,uCAAjE,CAAN;AACA;;AAED,MAAIA,KAAK,KAAK,QAAd,EAAwB;AACvB,WAAOnB,cAAc,CAACkB,KAAD,CAArB;AACA;;AACD,MAAIC,KAAK,KAAK,QAAd,EAAwB;AACvB,WAAOb,aAAa,CAACY,KAAD,CAApB;AACA;;AACD,MAAIC,KAAK,KAAK,SAAd,EAAyB;AACxB,WAAOV,cAAc,CAACS,KAAD,CAArB;AACA;;AACD,MAAIC,KAAK,KAAK,QAAd,EAAwB;AACvB,QAAI,CAACrB,UAAL,EAAiB;AAChB,YAAM,IAAIuB,SAAJ,CAAc,wGAAd,CAAN;AACA;;AACD,WAAOV,aAAa,CAACO,KAAD,CAApB;AACA;;AACD,MAAIC,KAAK,KAAK,QAAd,EAAwB;AACvB,WAAON,aAAa,CAACK,KAAD,CAApB;AACA;;AACD,QAAM,IAAII,UAAJ,CAAe,oCAAoCH,KAAnD,CAAN;AACA,CAzBD","sourcesContent":["'use strict';\n\nvar whichBoxedPrimitive = require('which-boxed-primitive');\nvar bind = require('function-bind');\nvar hasSymbols = require('has-symbols')();\nvar hasBigInts = require('has-bigints')();\n\nvar stringToString = bind.call(Function.call, String.prototype.toString);\nvar numberValueOf = bind.call(Function.call, Number.prototype.valueOf);\nvar booleanValueOf = bind.call(Function.call, Boolean.prototype.valueOf);\nvar symbolValueOf = hasSymbols && bind.call(Function.call, Symbol.prototype.valueOf);\nvar bigIntValueOf = hasBigInts && bind.call(Function.call, BigInt.prototype.valueOf);\n\nmodule.exports = function unboxPrimitive(value) {\n\tvar which = whichBoxedPrimitive(value);\n\tif (typeof which !== 'string') {\n\t\tthrow new TypeError(which === null ? 'value is an unboxed primitive' : 'value is a non-boxed-primitive object');\n\t}\n\n\tif (which === 'String') {\n\t\treturn stringToString(value);\n\t}\n\tif (which === 'Number') {\n\t\treturn numberValueOf(value);\n\t}\n\tif (which === 'Boolean') {\n\t\treturn booleanValueOf(value);\n\t}\n\tif (which === 'Symbol') {\n\t\tif (!hasSymbols) {\n\t\t\tthrow new EvalError('somehow this environment does not have Symbols, but you have a boxed Symbol value. Please report this!');\n\t\t}\n\t\treturn symbolValueOf(value);\n\t}\n\tif (which === 'BigInt') {\n\t\treturn bigIntValueOf(value);\n\t}\n\tthrow new RangeError('unknown boxed primitive found: ' + which);\n};\n"]},"metadata":{},"sourceType":"script"}