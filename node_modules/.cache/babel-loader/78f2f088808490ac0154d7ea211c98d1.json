{"ast":null,"code":"'use strict';\n\nvar trimStart = require('string.prototype.trimstart');\n\nvar trimEnd = require('string.prototype.trimend');\n\nvar GetIntrinsic = require('get-intrinsic');\n\nvar $TypeError = GetIntrinsic('%TypeError%');\n\nvar RequireObjectCoercible = require('./RequireObjectCoercible');\n\nvar ToString = require('./ToString'); // https://262.ecma-international.org/10.0/#sec-trimstring\n\n\nmodule.exports = function TrimString(string, where) {\n  var str = RequireObjectCoercible(string);\n  var S = ToString(str);\n  var T;\n\n  if (where === 'start') {\n    T = trimStart(S);\n  } else if (where === 'end') {\n    T = trimEnd(S);\n  } else if (where === 'start+end') {\n    T = trimStart(trimEnd(S));\n  } else {\n    throw new $TypeError('Assertion failed: invalid `where` value; must be \"start\", \"end\", or \"start+end\"');\n  }\n\n  return T;\n};","map":{"version":3,"sources":["C:/Users/DELL/Downloads/hook2-main/node_modules/es-abstract/2019/TrimString.js"],"names":["trimStart","require","trimEnd","GetIntrinsic","$TypeError","RequireObjectCoercible","ToString","module","exports","TrimString","string","where","str","S","T"],"mappings":"AAAA;;AAEA,IAAIA,SAAS,GAAGC,OAAO,CAAC,4BAAD,CAAvB;;AACA,IAAIC,OAAO,GAAGD,OAAO,CAAC,0BAAD,CAArB;;AAEA,IAAIE,YAAY,GAAGF,OAAO,CAAC,eAAD,CAA1B;;AAEA,IAAIG,UAAU,GAAGD,YAAY,CAAC,aAAD,CAA7B;;AAEA,IAAIE,sBAAsB,GAAGJ,OAAO,CAAC,0BAAD,CAApC;;AACA,IAAIK,QAAQ,GAAGL,OAAO,CAAC,YAAD,CAAtB,C,CAEA;;;AAEAM,MAAM,CAACC,OAAP,GAAiB,SAASC,UAAT,CAAoBC,MAApB,EAA4BC,KAA5B,EAAmC;AACnD,MAAIC,GAAG,GAAGP,sBAAsB,CAACK,MAAD,CAAhC;AACA,MAAIG,CAAC,GAAGP,QAAQ,CAACM,GAAD,CAAhB;AACA,MAAIE,CAAJ;;AACA,MAAIH,KAAK,KAAK,OAAd,EAAuB;AACtBG,IAAAA,CAAC,GAAGd,SAAS,CAACa,CAAD,CAAb;AACA,GAFD,MAEO,IAAIF,KAAK,KAAK,KAAd,EAAqB;AAC3BG,IAAAA,CAAC,GAAGZ,OAAO,CAACW,CAAD,CAAX;AACA,GAFM,MAEA,IAAIF,KAAK,KAAK,WAAd,EAA2B;AACjCG,IAAAA,CAAC,GAAGd,SAAS,CAACE,OAAO,CAACW,CAAD,CAAR,CAAb;AACA,GAFM,MAEA;AACN,UAAM,IAAIT,UAAJ,CAAe,iFAAf,CAAN;AACA;;AACD,SAAOU,CAAP;AACA,CAdD","sourcesContent":["'use strict';\n\nvar trimStart = require('string.prototype.trimstart');\nvar trimEnd = require('string.prototype.trimend');\n\nvar GetIntrinsic = require('get-intrinsic');\n\nvar $TypeError = GetIntrinsic('%TypeError%');\n\nvar RequireObjectCoercible = require('./RequireObjectCoercible');\nvar ToString = require('./ToString');\n\n// https://262.ecma-international.org/10.0/#sec-trimstring\n\nmodule.exports = function TrimString(string, where) {\n\tvar str = RequireObjectCoercible(string);\n\tvar S = ToString(str);\n\tvar T;\n\tif (where === 'start') {\n\t\tT = trimStart(S);\n\t} else if (where === 'end') {\n\t\tT = trimEnd(S);\n\t} else if (where === 'start+end') {\n\t\tT = trimStart(trimEnd(S));\n\t} else {\n\t\tthrow new $TypeError('Assertion failed: invalid `where` value; must be \"start\", \"end\", or \"start+end\"');\n\t}\n\treturn T;\n};\n"]},"metadata":{},"sourceType":"script"}