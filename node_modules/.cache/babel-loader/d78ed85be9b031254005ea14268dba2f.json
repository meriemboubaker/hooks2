{"ast":null,"code":"'use strict';\n\nvar GetIntrinsic = require('get-intrinsic');\n\nvar $TypeError = GetIntrinsic('%TypeError%');\n\nvar isNaN = require('../../helpers/isNaN');\n\nvar Type = require('../Type'); // https://262.ecma-international.org/11.0/#sec-numeric-types-number-multiply\n\n\nmodule.exports = function NumberMultiply(x, y) {\n  if (Type(x) !== 'Number' || Type(y) !== 'Number') {\n    throw new $TypeError('Assertion failed: `x` and `y` arguments must be Numbers');\n  }\n\n  if (isNaN(x) || isNaN(y) || x === 0 && !isFinite(y) || !isFinite(x) && y === 0) {\n    return NaN;\n  }\n\n  if (!isFinite(x) && !isFinite(y)) {\n    return x === y ? Infinity : -Infinity;\n  }\n\n  if (!isFinite(x) && y !== 0) {\n    return x > 0 ? Infinity : -Infinity;\n  }\n\n  if (!isFinite(y) && x !== 0) {\n    return y > 0 ? Infinity : -Infinity;\n  } // shortcut for the actual spec mechanics\n\n\n  return x * y;\n};","map":{"version":3,"sources":["C:/Users/DELL/Downloads/hook2-main/node_modules/es-abstract/2020/Number/multiply.js"],"names":["GetIntrinsic","require","$TypeError","isNaN","Type","module","exports","NumberMultiply","x","y","isFinite","NaN","Infinity"],"mappings":"AAAA;;AAEA,IAAIA,YAAY,GAAGC,OAAO,CAAC,eAAD,CAA1B;;AAEA,IAAIC,UAAU,GAAGF,YAAY,CAAC,aAAD,CAA7B;;AAEA,IAAIG,KAAK,GAAGF,OAAO,CAAC,qBAAD,CAAnB;;AAEA,IAAIG,IAAI,GAAGH,OAAO,CAAC,SAAD,CAAlB,C,CAEA;;;AAEAI,MAAM,CAACC,OAAP,GAAiB,SAASC,cAAT,CAAwBC,CAAxB,EAA2BC,CAA3B,EAA8B;AAC9C,MAAIL,IAAI,CAACI,CAAD,CAAJ,KAAY,QAAZ,IAAwBJ,IAAI,CAACK,CAAD,CAAJ,KAAY,QAAxC,EAAkD;AACjD,UAAM,IAAIP,UAAJ,CAAe,yDAAf,CAAN;AACA;;AAED,MAAIC,KAAK,CAACK,CAAD,CAAL,IAAYL,KAAK,CAACM,CAAD,CAAjB,IAAyBD,CAAC,KAAK,CAAN,IAAW,CAACE,QAAQ,CAACD,CAAD,CAA7C,IAAsD,CAACC,QAAQ,CAACF,CAAD,CAAT,IAAgBC,CAAC,KAAK,CAAhF,EAAoF;AACnF,WAAOE,GAAP;AACA;;AACD,MAAI,CAACD,QAAQ,CAACF,CAAD,CAAT,IAAgB,CAACE,QAAQ,CAACD,CAAD,CAA7B,EAAkC;AACjC,WAAOD,CAAC,KAAKC,CAAN,GAAUG,QAAV,GAAqB,CAACA,QAA7B;AACA;;AACD,MAAI,CAACF,QAAQ,CAACF,CAAD,CAAT,IAAgBC,CAAC,KAAK,CAA1B,EAA6B;AAC5B,WAAOD,CAAC,GAAG,CAAJ,GAAQI,QAAR,GAAmB,CAACA,QAA3B;AACA;;AACD,MAAI,CAACF,QAAQ,CAACD,CAAD,CAAT,IAAgBD,CAAC,KAAK,CAA1B,EAA6B;AAC5B,WAAOC,CAAC,GAAG,CAAJ,GAAQG,QAAR,GAAmB,CAACA,QAA3B;AACA,GAhB6C,CAkB9C;;;AACA,SAAOJ,CAAC,GAAGC,CAAX;AACA,CApBD","sourcesContent":["'use strict';\n\nvar GetIntrinsic = require('get-intrinsic');\n\nvar $TypeError = GetIntrinsic('%TypeError%');\n\nvar isNaN = require('../../helpers/isNaN');\n\nvar Type = require('../Type');\n\n// https://262.ecma-international.org/11.0/#sec-numeric-types-number-multiply\n\nmodule.exports = function NumberMultiply(x, y) {\n\tif (Type(x) !== 'Number' || Type(y) !== 'Number') {\n\t\tthrow new $TypeError('Assertion failed: `x` and `y` arguments must be Numbers');\n\t}\n\n\tif (isNaN(x) || isNaN(y) || (x === 0 && !isFinite(y)) || (!isFinite(x) && y === 0)) {\n\t\treturn NaN;\n\t}\n\tif (!isFinite(x) && !isFinite(y)) {\n\t\treturn x === y ? Infinity : -Infinity;\n\t}\n\tif (!isFinite(x) && y !== 0) {\n\t\treturn x > 0 ? Infinity : -Infinity;\n\t}\n\tif (!isFinite(y) && x !== 0) {\n\t\treturn y > 0 ? Infinity : -Infinity;\n\t}\n\n\t// shortcut for the actual spec mechanics\n\treturn x * y;\n};\n"]},"metadata":{},"sourceType":"script"}