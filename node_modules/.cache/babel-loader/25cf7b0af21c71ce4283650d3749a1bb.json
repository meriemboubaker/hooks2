{"ast":null,"code":"'use strict';\n\nvar GetIntrinsic = require('get-intrinsic');\n\nvar $TypeError = GetIntrinsic('%TypeError%');\n\nvar callBound = require('call-bind/callBound');\n\nvar ToLength = require('./ToLength');\n\nvar ToString = require('./ToString');\n\nvar $strSlice = callBound('String.prototype.slice'); // https://262.ecma-international.org/11.0/#sec-stringpad\n\nmodule.exports = function StringPad(O, maxLength, fillString, placement) {\n  if (placement !== 'start' && placement !== 'end') {\n    throw new $TypeError('Assertion failed: `placement` must be \"start\" or \"end\"');\n  }\n\n  var S = ToString(O);\n  var intMaxLength = ToLength(maxLength);\n  var stringLength = S.length;\n\n  if (intMaxLength <= stringLength) {\n    return S;\n  }\n\n  var filler = typeof fillString === 'undefined' ? ' ' : ToString(fillString);\n\n  if (filler === '') {\n    return S;\n  }\n\n  var fillLen = intMaxLength - stringLength; // the String value consisting of repeated concatenations of filler truncated to length fillLen.\n\n  var truncatedStringFiller = '';\n\n  while (truncatedStringFiller.length < fillLen) {\n    truncatedStringFiller += filler;\n  }\n\n  truncatedStringFiller = $strSlice(truncatedStringFiller, 0, fillLen);\n\n  if (placement === 'start') {\n    return truncatedStringFiller + S;\n  }\n\n  return S + truncatedStringFiller;\n};","map":{"version":3,"sources":["C:/Users/DELL/Downloads/hook2-main/node_modules/es-abstract/2020/StringPad.js"],"names":["GetIntrinsic","require","$TypeError","callBound","ToLength","ToString","$strSlice","module","exports","StringPad","O","maxLength","fillString","placement","S","intMaxLength","stringLength","length","filler","fillLen","truncatedStringFiller"],"mappings":"AAAA;;AAEA,IAAIA,YAAY,GAAGC,OAAO,CAAC,eAAD,CAA1B;;AAEA,IAAIC,UAAU,GAAGF,YAAY,CAAC,aAAD,CAA7B;;AAEA,IAAIG,SAAS,GAAGF,OAAO,CAAC,qBAAD,CAAvB;;AAEA,IAAIG,QAAQ,GAAGH,OAAO,CAAC,YAAD,CAAtB;;AACA,IAAII,QAAQ,GAAGJ,OAAO,CAAC,YAAD,CAAtB;;AAEA,IAAIK,SAAS,GAAGH,SAAS,CAAC,wBAAD,CAAzB,C,CAEA;;AAEAI,MAAM,CAACC,OAAP,GAAiB,SAASC,SAAT,CAAmBC,CAAnB,EAAsBC,SAAtB,EAAiCC,UAAjC,EAA6CC,SAA7C,EAAwD;AACxE,MAAIA,SAAS,KAAK,OAAd,IAAyBA,SAAS,KAAK,KAA3C,EAAkD;AACjD,UAAM,IAAIX,UAAJ,CAAe,wDAAf,CAAN;AACA;;AACD,MAAIY,CAAC,GAAGT,QAAQ,CAACK,CAAD,CAAhB;AACA,MAAIK,YAAY,GAAGX,QAAQ,CAACO,SAAD,CAA3B;AACA,MAAIK,YAAY,GAAGF,CAAC,CAACG,MAArB;;AACA,MAAIF,YAAY,IAAIC,YAApB,EAAkC;AACjC,WAAOF,CAAP;AACA;;AACD,MAAII,MAAM,GAAG,OAAON,UAAP,KAAsB,WAAtB,GAAoC,GAApC,GAA0CP,QAAQ,CAACO,UAAD,CAA/D;;AACA,MAAIM,MAAM,KAAK,EAAf,EAAmB;AAClB,WAAOJ,CAAP;AACA;;AACD,MAAIK,OAAO,GAAGJ,YAAY,GAAGC,YAA7B,CAdwE,CAgBxE;;AACA,MAAII,qBAAqB,GAAG,EAA5B;;AACA,SAAOA,qBAAqB,CAACH,MAAtB,GAA+BE,OAAtC,EAA+C;AAC9CC,IAAAA,qBAAqB,IAAIF,MAAzB;AACA;;AACDE,EAAAA,qBAAqB,GAAGd,SAAS,CAACc,qBAAD,EAAwB,CAAxB,EAA2BD,OAA3B,CAAjC;;AAEA,MAAIN,SAAS,KAAK,OAAlB,EAA2B;AAC1B,WAAOO,qBAAqB,GAAGN,CAA/B;AACA;;AACD,SAAOA,CAAC,GAAGM,qBAAX;AACA,CA3BD","sourcesContent":["'use strict';\n\nvar GetIntrinsic = require('get-intrinsic');\n\nvar $TypeError = GetIntrinsic('%TypeError%');\n\nvar callBound = require('call-bind/callBound');\n\nvar ToLength = require('./ToLength');\nvar ToString = require('./ToString');\n\nvar $strSlice = callBound('String.prototype.slice');\n\n// https://262.ecma-international.org/11.0/#sec-stringpad\n\nmodule.exports = function StringPad(O, maxLength, fillString, placement) {\n\tif (placement !== 'start' && placement !== 'end') {\n\t\tthrow new $TypeError('Assertion failed: `placement` must be \"start\" or \"end\"');\n\t}\n\tvar S = ToString(O);\n\tvar intMaxLength = ToLength(maxLength);\n\tvar stringLength = S.length;\n\tif (intMaxLength <= stringLength) {\n\t\treturn S;\n\t}\n\tvar filler = typeof fillString === 'undefined' ? ' ' : ToString(fillString);\n\tif (filler === '') {\n\t\treturn S;\n\t}\n\tvar fillLen = intMaxLength - stringLength;\n\n\t// the String value consisting of repeated concatenations of filler truncated to length fillLen.\n\tvar truncatedStringFiller = '';\n\twhile (truncatedStringFiller.length < fillLen) {\n\t\ttruncatedStringFiller += filler;\n\t}\n\ttruncatedStringFiller = $strSlice(truncatedStringFiller, 0, fillLen);\n\n\tif (placement === 'start') {\n\t\treturn truncatedStringFiller + S;\n\t}\n\treturn S + truncatedStringFiller;\n};\n"]},"metadata":{},"sourceType":"script"}