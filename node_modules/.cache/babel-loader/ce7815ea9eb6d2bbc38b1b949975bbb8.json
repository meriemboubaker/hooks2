{"ast":null,"code":"'use strict';\n\nvar GetIntrinsic = require('get-intrinsic');\n\nvar $TypeError = GetIntrinsic('%TypeError%');\n\nvar callBound = require('call-bind/callBound');\n\nvar $push = callBound('Array.prototype.push');\n\nvar CodePointAt = require('./CodePointAt');\n\nvar Type = require('./Type'); // https://262.ecma-international.org/11.0/#sec-utf16decodestring\n\n\nmodule.exports = function UTF16DecodeString(string) {\n  if (Type(string) !== 'String') {\n    throw new $TypeError('Assertion failed: `string` must be a String');\n  }\n\n  var codePoints = [];\n  var size = string.length;\n  var position = 0;\n\n  while (position < size) {\n    var cp = CodePointAt(string, position);\n    $push(codePoints, cp['[[CodePoint]]']);\n    position += cp['[[CodeUnitCount]]'];\n  }\n\n  return codePoints;\n};","map":{"version":3,"sources":["C:/Users/DELL/Downloads/hook2-main/node_modules/es-abstract/2020/UTF16DecodeString.js"],"names":["GetIntrinsic","require","$TypeError","callBound","$push","CodePointAt","Type","module","exports","UTF16DecodeString","string","codePoints","size","length","position","cp"],"mappings":"AAAA;;AAEA,IAAIA,YAAY,GAAGC,OAAO,CAAC,eAAD,CAA1B;;AAEA,IAAIC,UAAU,GAAGF,YAAY,CAAC,aAAD,CAA7B;;AAEA,IAAIG,SAAS,GAAGF,OAAO,CAAC,qBAAD,CAAvB;;AAEA,IAAIG,KAAK,GAAGD,SAAS,CAAC,sBAAD,CAArB;;AAEA,IAAIE,WAAW,GAAGJ,OAAO,CAAC,eAAD,CAAzB;;AACA,IAAIK,IAAI,GAAGL,OAAO,CAAC,QAAD,CAAlB,C,CAEA;;;AAEAM,MAAM,CAACC,OAAP,GAAiB,SAASC,iBAAT,CAA2BC,MAA3B,EAAmC;AACnD,MAAIJ,IAAI,CAACI,MAAD,CAAJ,KAAiB,QAArB,EAA+B;AAC9B,UAAM,IAAIR,UAAJ,CAAe,6CAAf,CAAN;AACA;;AACD,MAAIS,UAAU,GAAG,EAAjB;AACA,MAAIC,IAAI,GAAGF,MAAM,CAACG,MAAlB;AACA,MAAIC,QAAQ,GAAG,CAAf;;AACA,SAAOA,QAAQ,GAAGF,IAAlB,EAAwB;AACvB,QAAIG,EAAE,GAAGV,WAAW,CAACK,MAAD,EAASI,QAAT,CAApB;AACAV,IAAAA,KAAK,CAACO,UAAD,EAAaI,EAAE,CAAC,eAAD,CAAf,CAAL;AACAD,IAAAA,QAAQ,IAAIC,EAAE,CAAC,mBAAD,CAAd;AACA;;AACD,SAAOJ,UAAP;AACA,CAbD","sourcesContent":["'use strict';\n\nvar GetIntrinsic = require('get-intrinsic');\n\nvar $TypeError = GetIntrinsic('%TypeError%');\n\nvar callBound = require('call-bind/callBound');\n\nvar $push = callBound('Array.prototype.push');\n\nvar CodePointAt = require('./CodePointAt');\nvar Type = require('./Type');\n\n// https://262.ecma-international.org/11.0/#sec-utf16decodestring\n\nmodule.exports = function UTF16DecodeString(string) {\n\tif (Type(string) !== 'String') {\n\t\tthrow new $TypeError('Assertion failed: `string` must be a String');\n\t}\n\tvar codePoints = [];\n\tvar size = string.length;\n\tvar position = 0;\n\twhile (position < size) {\n\t\tvar cp = CodePointAt(string, position);\n\t\t$push(codePoints, cp['[[CodePoint]]']);\n\t\tposition += cp['[[CodeUnitCount]]'];\n\t}\n\treturn codePoints;\n};\n"]},"metadata":{},"sourceType":"script"}