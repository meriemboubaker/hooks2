{"ast":null,"code":"'use strict';\n\nvar GetIntrinsic = require('get-intrinsic');\n\nvar $TypeError = GetIntrinsic('%TypeError%');\n\nvar Type = require('../Type'); // https://262.ecma-international.org/11.0/#sec-numeric-types-bigint-leftShift\n\n\nmodule.exports = function BigIntLeftShift(x, y) {\n  if (Type(x) !== 'BigInt' || Type(y) !== 'BigInt') {\n    throw new $TypeError('Assertion failed: `x` and `y` arguments must be BigInts');\n  } // shortcut for the actual spec mechanics\n\n\n  return x << y;\n};","map":{"version":3,"sources":["C:/Users/DELL/Downloads/hook2-main/node_modules/es-abstract/2020/BigInt/leftShift.js"],"names":["GetIntrinsic","require","$TypeError","Type","module","exports","BigIntLeftShift","x","y"],"mappings":"AAAA;;AAEA,IAAIA,YAAY,GAAGC,OAAO,CAAC,eAAD,CAA1B;;AAEA,IAAIC,UAAU,GAAGF,YAAY,CAAC,aAAD,CAA7B;;AAEA,IAAIG,IAAI,GAAGF,OAAO,CAAC,SAAD,CAAlB,C,CAEA;;;AAEAG,MAAM,CAACC,OAAP,GAAiB,SAASC,eAAT,CAAyBC,CAAzB,EAA4BC,CAA5B,EAA+B;AAC/C,MAAIL,IAAI,CAACI,CAAD,CAAJ,KAAY,QAAZ,IAAwBJ,IAAI,CAACK,CAAD,CAAJ,KAAY,QAAxC,EAAkD;AACjD,UAAM,IAAIN,UAAJ,CAAe,yDAAf,CAAN;AACA,GAH8C,CAK/C;;;AACA,SAAOK,CAAC,IAAIC,CAAZ;AACA,CAPD","sourcesContent":["'use strict';\n\nvar GetIntrinsic = require('get-intrinsic');\n\nvar $TypeError = GetIntrinsic('%TypeError%');\n\nvar Type = require('../Type');\n\n// https://262.ecma-international.org/11.0/#sec-numeric-types-bigint-leftShift\n\nmodule.exports = function BigIntLeftShift(x, y) {\n\tif (Type(x) !== 'BigInt' || Type(y) !== 'BigInt') {\n\t\tthrow new $TypeError('Assertion failed: `x` and `y` arguments must be BigInts');\n\t}\n\n\t// shortcut for the actual spec mechanics\n\treturn x << y;\n};\n"]},"metadata":{},"sourceType":"script"}