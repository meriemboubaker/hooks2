{"ast":null,"code":"'use strict';\n\nvar GetIntrinsic = require('get-intrinsic');\n\nvar $TypeError = GetIntrinsic('%TypeError%');\n\nvar isNaN = require('../../helpers/isNaN');\n\nvar Type = require('../Type'); // https://262.ecma-international.org/11.0/#sec-numeric-types-number-remainder\n\n\nmodule.exports = function NumberRemainder(n, d) {\n  if (Type(n) !== 'Number' || Type(d) !== 'Number') {\n    throw new $TypeError('Assertion failed: `n` and `d` arguments must be Numbers');\n  } // If either operand is NaN, the result is NaN.\n  // If the dividend is an infinity, or the divisor is a zero, or both, the result is NaN.\n\n\n  if (isNaN(n) || isNaN(d) || !isFinite(n) || d === 0) {\n    return NaN;\n  } // If the dividend is finite and the divisor is an infinity, the result equals the dividend.\n  // If the dividend is a zero and the divisor is nonzero and finite, the result is the same as the dividend.\n\n\n  if (!isFinite(d) || n === 0 && d !== 0) {\n    return n;\n  } // In the remaining cases, where neither an infinity, nor a zero, nor NaN is involved…\n\n\n  return n % d;\n};","map":{"version":3,"sources":["C:/Users/DELL/Downloads/hook2-main/node_modules/es-abstract/2020/Number/remainder.js"],"names":["GetIntrinsic","require","$TypeError","isNaN","Type","module","exports","NumberRemainder","n","d","isFinite","NaN"],"mappings":"AAAA;;AAEA,IAAIA,YAAY,GAAGC,OAAO,CAAC,eAAD,CAA1B;;AAEA,IAAIC,UAAU,GAAGF,YAAY,CAAC,aAAD,CAA7B;;AAEA,IAAIG,KAAK,GAAGF,OAAO,CAAC,qBAAD,CAAnB;;AAEA,IAAIG,IAAI,GAAGH,OAAO,CAAC,SAAD,CAAlB,C,CAEA;;;AAEAI,MAAM,CAACC,OAAP,GAAiB,SAASC,eAAT,CAAyBC,CAAzB,EAA4BC,CAA5B,EAA+B;AAC/C,MAAIL,IAAI,CAACI,CAAD,CAAJ,KAAY,QAAZ,IAAwBJ,IAAI,CAACK,CAAD,CAAJ,KAAY,QAAxC,EAAkD;AACjD,UAAM,IAAIP,UAAJ,CAAe,yDAAf,CAAN;AACA,GAH8C,CAK/C;AACA;;;AACA,MAAIC,KAAK,CAACK,CAAD,CAAL,IAAYL,KAAK,CAACM,CAAD,CAAjB,IAAwB,CAACC,QAAQ,CAACF,CAAD,CAAjC,IAAwCC,CAAC,KAAK,CAAlD,EAAqD;AACpD,WAAOE,GAAP;AACA,GAT8C,CAW/C;AACA;;;AACA,MAAI,CAACD,QAAQ,CAACD,CAAD,CAAT,IAAiBD,CAAC,KAAK,CAAN,IAAWC,CAAC,KAAK,CAAtC,EAA0C;AACzC,WAAOD,CAAP;AACA,GAf8C,CAiB/C;;;AACA,SAAOA,CAAC,GAAGC,CAAX;AACA,CAnBD","sourcesContent":["'use strict';\n\nvar GetIntrinsic = require('get-intrinsic');\n\nvar $TypeError = GetIntrinsic('%TypeError%');\n\nvar isNaN = require('../../helpers/isNaN');\n\nvar Type = require('../Type');\n\n// https://262.ecma-international.org/11.0/#sec-numeric-types-number-remainder\n\nmodule.exports = function NumberRemainder(n, d) {\n\tif (Type(n) !== 'Number' || Type(d) !== 'Number') {\n\t\tthrow new $TypeError('Assertion failed: `n` and `d` arguments must be Numbers');\n\t}\n\n\t// If either operand is NaN, the result is NaN.\n\t// If the dividend is an infinity, or the divisor is a zero, or both, the result is NaN.\n\tif (isNaN(n) || isNaN(d) || !isFinite(n) || d === 0) {\n\t\treturn NaN;\n\t}\n\n\t// If the dividend is finite and the divisor is an infinity, the result equals the dividend.\n\t// If the dividend is a zero and the divisor is nonzero and finite, the result is the same as the dividend.\n\tif (!isFinite(d) || (n === 0 && d !== 0)) {\n\t\treturn n;\n\t}\n\n\t// In the remaining cases, where neither an infinity, nor a zero, nor NaN is involved…\n\treturn n % d;\n};\n"]},"metadata":{},"sourceType":"script"}