{"ast":null,"code":"'use strict';\n\nvar GetIntrinsic = require('get-intrinsic');\n\nvar $TypeError = GetIntrinsic('%TypeError%');\n\nvar ToInt32 = require('../ToInt32');\n\nvar Type = require('../Type'); // https://262.ecma-international.org/11.0/#sec-numeric-types-number-bitwiseNOT\n\n\nmodule.exports = function NumberBitwiseNOT(x) {\n  if (Type(x) !== 'Number') {\n    throw new $TypeError('Assertion failed: `x` argument must be a Number');\n  }\n\n  var oldValue = ToInt32(x); // Return the result of applying the bitwise operator op to lnum and rnum. The result is a signed 32-bit integer.\n\n  return ~oldValue;\n};","map":{"version":3,"sources":["C:/Users/DELL/Downloads/hook2-main/node_modules/es-abstract/2020/Number/bitwiseNOT.js"],"names":["GetIntrinsic","require","$TypeError","ToInt32","Type","module","exports","NumberBitwiseNOT","x","oldValue"],"mappings":"AAAA;;AAEA,IAAIA,YAAY,GAAGC,OAAO,CAAC,eAAD,CAA1B;;AAEA,IAAIC,UAAU,GAAGF,YAAY,CAAC,aAAD,CAA7B;;AAEA,IAAIG,OAAO,GAAGF,OAAO,CAAC,YAAD,CAArB;;AACA,IAAIG,IAAI,GAAGH,OAAO,CAAC,SAAD,CAAlB,C,CAEA;;;AAEAI,MAAM,CAACC,OAAP,GAAiB,SAASC,gBAAT,CAA0BC,CAA1B,EAA6B;AAC7C,MAAIJ,IAAI,CAACI,CAAD,CAAJ,KAAY,QAAhB,EAA0B;AACzB,UAAM,IAAIN,UAAJ,CAAe,iDAAf,CAAN;AACA;;AACD,MAAIO,QAAQ,GAAGN,OAAO,CAACK,CAAD,CAAtB,CAJ6C,CAK7C;;AACA,SAAO,CAACC,QAAR;AACA,CAPD","sourcesContent":["'use strict';\n\nvar GetIntrinsic = require('get-intrinsic');\n\nvar $TypeError = GetIntrinsic('%TypeError%');\n\nvar ToInt32 = require('../ToInt32');\nvar Type = require('../Type');\n\n// https://262.ecma-international.org/11.0/#sec-numeric-types-number-bitwiseNOT\n\nmodule.exports = function NumberBitwiseNOT(x) {\n\tif (Type(x) !== 'Number') {\n\t\tthrow new $TypeError('Assertion failed: `x` argument must be a Number');\n\t}\n\tvar oldValue = ToInt32(x);\n\t// Return the result of applying the bitwise operator op to lnum and rnum. The result is a signed 32-bit integer.\n\treturn ~oldValue;\n};\n"]},"metadata":{},"sourceType":"script"}