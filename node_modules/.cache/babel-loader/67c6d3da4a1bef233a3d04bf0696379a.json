{"ast":null,"code":"'use strict';\n\nvar GetIntrinsic = require('get-intrinsic');\n\nvar $TypeError = GetIntrinsic('%TypeError%');\n\nvar ToInt32 = require('./ToInt32');\n\nvar ToUint32 = require('./ToUint32');\n\nvar Type = require('./Type'); // https://262.ecma-international.org/11.0/#sec-numberbitwiseop\n\n\nmodule.exports = function NumberBitwiseOp(op, x, y) {\n  if (op !== '&' && op !== '|' && op !== '^') {\n    throw new $TypeError('Assertion failed: `op` must be `&`, `|`, or `^`');\n  }\n\n  if (Type(x) !== 'Number' || Type(y) !== 'Number') {\n    throw new $TypeError('Assertion failed: `x` and `y` arguments must be Numbers');\n  }\n\n  var lnum = ToInt32(x);\n  var rnum = ToUint32(y);\n\n  if (op === '&') {\n    return lnum & rnum;\n  }\n\n  if (op === '|') {\n    return lnum | rnum;\n  }\n\n  return lnum ^ rnum;\n};","map":{"version":3,"sources":["C:/Users/DELL/Downloads/hook2-main/node_modules/es-abstract/2020/NumberBitwiseOp.js"],"names":["GetIntrinsic","require","$TypeError","ToInt32","ToUint32","Type","module","exports","NumberBitwiseOp","op","x","y","lnum","rnum"],"mappings":"AAAA;;AAEA,IAAIA,YAAY,GAAGC,OAAO,CAAC,eAAD,CAA1B;;AAEA,IAAIC,UAAU,GAAGF,YAAY,CAAC,aAAD,CAA7B;;AAEA,IAAIG,OAAO,GAAGF,OAAO,CAAC,WAAD,CAArB;;AACA,IAAIG,QAAQ,GAAGH,OAAO,CAAC,YAAD,CAAtB;;AACA,IAAII,IAAI,GAAGJ,OAAO,CAAC,QAAD,CAAlB,C,CAEA;;;AAEAK,MAAM,CAACC,OAAP,GAAiB,SAASC,eAAT,CAAyBC,EAAzB,EAA6BC,CAA7B,EAAgCC,CAAhC,EAAmC;AACnD,MAAIF,EAAE,KAAK,GAAP,IAAcA,EAAE,KAAK,GAArB,IAA4BA,EAAE,KAAK,GAAvC,EAA4C;AAC3C,UAAM,IAAIP,UAAJ,CAAe,iDAAf,CAAN;AACA;;AACD,MAAIG,IAAI,CAACK,CAAD,CAAJ,KAAY,QAAZ,IAAwBL,IAAI,CAACM,CAAD,CAAJ,KAAY,QAAxC,EAAkD;AACjD,UAAM,IAAIT,UAAJ,CAAe,yDAAf,CAAN;AACA;;AACD,MAAIU,IAAI,GAAGT,OAAO,CAACO,CAAD,CAAlB;AACA,MAAIG,IAAI,GAAGT,QAAQ,CAACO,CAAD,CAAnB;;AACA,MAAIF,EAAE,KAAK,GAAX,EAAgB;AACf,WAAOG,IAAI,GAAGC,IAAd;AACA;;AACD,MAAIJ,EAAE,KAAK,GAAX,EAAgB;AACf,WAAOG,IAAI,GAAGC,IAAd;AACA;;AACD,SAAOD,IAAI,GAAGC,IAAd;AACA,CAhBD","sourcesContent":["'use strict';\n\nvar GetIntrinsic = require('get-intrinsic');\n\nvar $TypeError = GetIntrinsic('%TypeError%');\n\nvar ToInt32 = require('./ToInt32');\nvar ToUint32 = require('./ToUint32');\nvar Type = require('./Type');\n\n// https://262.ecma-international.org/11.0/#sec-numberbitwiseop\n\nmodule.exports = function NumberBitwiseOp(op, x, y) {\n\tif (op !== '&' && op !== '|' && op !== '^') {\n\t\tthrow new $TypeError('Assertion failed: `op` must be `&`, `|`, or `^`');\n\t}\n\tif (Type(x) !== 'Number' || Type(y) !== 'Number') {\n\t\tthrow new $TypeError('Assertion failed: `x` and `y` arguments must be Numbers');\n\t}\n\tvar lnum = ToInt32(x);\n\tvar rnum = ToUint32(y);\n\tif (op === '&') {\n\t\treturn lnum & rnum;\n\t}\n\tif (op === '|') {\n\t\treturn lnum | rnum;\n\t}\n\treturn lnum ^ rnum;\n};\n"]},"metadata":{},"sourceType":"script"}